# Generated by Django 4.2.7 on 2023-11-22 17:20

from django.db import migrations, models
import django.db.models.deletion
from ..permissions import assign_permissions


def assign_groups_and_permissions(apps, schema_editor):
    # Obtener el modelo User de la aplicación
    User = apps.get_model('auth', 'User')
    Group = apps.get_model('auth', 'Group')
    Permission = apps.get_model('auth', 'Permission')

    # Obtener o crear grupos
    user_group, created = Group.objects.get_or_create(name='Usuarios')
    admin_group, created = Group.objects.get_or_create(name='Administradores')

    # Obtener o crear usuarios
    user, created = User.objects.get_or_create(username='nombre_usuario_regular')
    admin, created = User.objects.get_or_create(username='nombre_usuario_admin')

    # Asegúrate de que los permisos ya existen antes de intentar crearlos
    add_device_permission, _ = Permission.objects.get_or_create(codename='add_device', name='Can add device')
    add_virtualdevice_permission, _ = Permission.objects.get_or_create(codename='add_virtualdevice', name='Can add virtual device')

    # Asignar permisos a los grupos solo si no están ya asignados
    if not user_group.permissions.filter(id=add_device_permission.id).exists():
        user_group.permissions.add(add_device_permission)
    if not admin_group.permissions.filter(id=add_device_permission.id).exists():
        admin_group.permissions.add(add_device_permission)
    if not admin_group.permissions.filter(id=add_virtualdevice_permission.id).exists():
        admin_group.permissions.add(add_virtualdevice_permission)

    # Asignar usuarios a grupos
    user.groups.add(user_group)
    admin.groups.add(admin_group)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='VirtualDevice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=100)),
                ('metadata', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TrafficData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('data', models.TextField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='traffic.device')),
            ],
        ),
        migrations.CreateModel(
            name='Thing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.CharField(max_length=100)),
                ('relationship', models.ManyToManyField(blank=True, to='traffic.thing')),
            ],
        ),
        migrations.RunPython(assign_groups_and_permissions),
    ]
